services:
  # -------- S3 (MinIO) --------
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio12345
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Web Console
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 3s
      retries: 20

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 minio minio12345 &&
      mc mb --ignore-existing local/ch-cold &&
      echo 'MinIO bucket ch-cold ready';
      "
    restart: "no"

  # -------- ClickHouse --------
  clickhouse:
    image: clickhouse/clickhouse-server:24.8
    container_name: clickhouse
    environment:
      - CLICKHOUSE_DB=swaps
      - CLICKHOUSE_USER=nevasik
      - CLICKHOUSE_PASSWORD=GpW56Q4nbbXf0Oi
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    ports:
      - "9002:9000"
      - "8123:8123"
    volumes:
      - ch-data:/var/lib/clickhouse
      - ./clickhouse/storage.xml:/etc/clickhouse-server/config.d/storage.xml:ro
      - ./clickhouse/log-console.xml:/etc/clickhouse-server/config.d/log-console.xml:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8123/ping | grep -q 'Ok'"]
      interval: 10s
      timeout: 3s
      retries: 60
    depends_on:
      minio-setup:
        condition: service_completed_successfully

  ch-init:
    image: clickhouse/clickhouse-server:24.8
    container_name: ch-init
    depends_on:
      clickhouse:
        condition: service_healthy
    volumes:
      - ./clickhouse/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    entrypoint: >
      /bin/bash -c "
      echo 'Applying ClickHouse schema...' &&
      clickhouse-client --host clickhouse --port 9000 --user nevasik --password GpW56Q4nbbXf0Oi --queries-file /docker-entrypoint-initdb.d/schema.sql &&
      echo 'ClickHouse schema applied';
      "
    restart: "no"

  # -------- Redpanda (Kafka API) --------
  redpanda:
    image: redpandadata/redpanda:v24.1.7
    container_name: redpanda
    command: >
      redpanda start
      --overprovisioned
      --smp 1
      --memory 1G
      --reserve-memory 0M
      --node-id 0
      --check=false
      --kafka-addr 0.0.0.0:9092
      --advertise-kafka-addr redpanda:9092
      --set redpanda.auto_create_topics_enabled=true
    ports:
      - "9092:9092"
    volumes:
      - redpanda-data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info --brokers localhost:9092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 4s
      retries: 30

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    depends_on:
      - redpanda
    environment:
      - KAFKA_BROKERS=redpanda:9092
    ports:
      - "8081:8080"

  rp-init:
    image: redpandadata/redpanda:v24.1.7
    container_name: rp-init
    depends_on:
      redpanda:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      rpk topic create raw-swaps -p 1 -r 1 --brokers redpanda:9092 || true;
      echo 'Kafka topic raw-swaps ready';
      "
    restart: "no"

  # -------- Redis --------
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "5JKksp3HVfAe", "--appendonly", "yes", "--save", "60", "1000"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 30

  # -------- NATS (с диском для JetStream) --------
  nats:
    image: nats:2.10-alpine
    container_name: nats
    restart: unless-stopped
    command: [ "-c", "/etc/nats/nats-server.conf" ]
    ports:
      - "4222:4222"  # NATS
      - "8222:8222"  # мониторинг /healthz
      - "6222:6222"  # кластерный порт (опц.)
      - "8080:8080"  # WebSocket (если включён в конфиге)
    volumes:
      - ./conf:/etc/nats:ro
      - nats-data:/data
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8222/healthz" ]
      interval: 5s
      timeout: 2s
      retries: 20

  nats-box:
    platform: linux/amd64
    image: synadia/nats-box
    container_name: nats-box
    depends_on: [ nats ]
    tty: true
    stdin_open: true
    environment:
      - NATS_URL=nats://dev:devpass@nats:4222

volumes:
  minio-data:
  ch-data:
  redpanda-data:
  redis-data:
  nats-data:
